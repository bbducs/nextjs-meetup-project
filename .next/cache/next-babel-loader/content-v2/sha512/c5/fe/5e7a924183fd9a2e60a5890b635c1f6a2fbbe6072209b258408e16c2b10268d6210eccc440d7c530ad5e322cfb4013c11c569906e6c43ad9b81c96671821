{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kishan/worklog/complete-next-js/nextjs-complete-project/pages/[meetupId]/index.js\";\nimport React from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://kishan:idea1234@cluster0.6ikmu8u.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetups');\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //Fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://kishan:idea1234@cluster0.6ikmu8u.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetups');\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/kishan/worklog/complete-next-js/nextjs-complete-project/pages/[meetupId]/index.js"],"names":["React","MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAGA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAE7B,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD5B;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH9B;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAVD;;AAYA,OAAO,eAAeC,cAAf,GAAgC;AAEnC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,gGAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC5BC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADN;AADoB,KAAb,CAAZ;AAFJ,GAAP;AAQH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,gGAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMe,cAAc,GAAG,MAAMhB,gBAAgB,CAACiB,OAAjB,CAAyB;AAAEb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,QAAD;AAAf,GAAzB,CAA7B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACA,SAAO;AACHtB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACR6B,QAAAA,EAAE,EAAEJ,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADI;AAERpB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFd;AAGRC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHhB;AAIRF,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAJd;AAKRG,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALpB;AADT;AADJ,GAAP;AAWH;AAED,eAAeN,aAAf","sourcesContent":["import React from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient, ObjectId } from 'mongodb'\n\n\nconst MeetupDetails = (props) => {\n   \n    return (\n        <MeetupDetail\n            image={props.meetupData.image}\n            title={props.meetupData.title}\n            address={props.meetupData.address}\n            description={props.meetupData.description}\n        />\n    );\n}\n\nexport async function getStaticPaths() {\n\n    const client = await MongoClient.connect('mongodb+srv://kishan:idea1234@cluster0.6ikmu8u.mongodb.net/meetups?retryWrites=true&w=majority');\n\n    const db = client.db();\n\n    const meetupCollection = db.collection('meetups');\n\n    const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\n\n    client.close();\n\n    return {\n        fallback: false,\n        paths: meetups.map((meetup) => ({\n            params: {\n                meetupId: meetup._id.toString()\n            }\n        }))\n    }\n}\n\nexport async function getStaticProps(context) {\n    //Fetch data for a single meetup\n\n    const meetupId = context.params.meetupId;\n\n    const client = await MongoClient.connect('mongodb+srv://kishan:idea1234@cluster0.6ikmu8u.mongodb.net/meetups?retryWrites=true&w=majority');\n\n    const db = client.db();\n\n    const meetupCollection = db.collection('meetups');\n\n    const selectedMeetup = await meetupCollection.findOne({ _id: ObjectId(meetupId) });\n\n    client.close();\n\n    console.log(meetupId)\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description\n            }\n        }\n    }\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}